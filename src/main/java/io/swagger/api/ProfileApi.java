/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Product;
import io.swagger.model.ProfileBody;
import io.swagger.model.Rating;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-01-13T11:54:37.193Z[GMT]")
@Validated
public interface ProfileApi {

    @Operation(summary = "Getting all the company's products.", description = "Allows you to get information about the entire product database for a specific company, so that you can then change or add products to it.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/api/profile",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Product>> getProfile(@Parameter(in = ParameterIn.HEADER, description = "The email address of the registered company for its identification in the database." ,schema=@Schema()) @RequestHeader(value="email", required=true) String email, @Parameter(in = ParameterIn.HEADER, description = "Company password" ,schema=@Schema()) @RequestHeader(value="password", required=true) String password);

    @Operation(summary = "Checking whether the specified company exists.", description = "The request is required for authorization in the system and entry to the order pages and the product database. This request only performs verification, if necessary, other requests will come into play.", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/api/checkProfile",
            method = RequestMethod.GET)
    ResponseEntity<Void> checkProfile(@Parameter(in = ParameterIn.HEADER, description = "The email address of the registered company for its identification in the database." ,schema=@Schema()) @RequestHeader(value="email", required=true) String email, @Parameter(in = ParameterIn.HEADER, description = "Company password" ,schema=@Schema()) @RequestHeader(value="password", required=true) String password);

    @Operation(summary = "Register a new company in system and create product database.", description = "The request adds a new company with the specified name, email and password to the database. After that, a dedicated table is created - a product database individually for this company. For example, adds \"Hello world!\" the product is included in the database, which can be edited later.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request") })
    @RequestMapping(value = "/api/profile",
        method = RequestMethod.POST)
    ResponseEntity<Void> postProfile(@Parameter(in = ParameterIn.HEADER, description = "The email address under which the company will log in to the site." ,schema=@Schema()) @RequestHeader(value="email", required=true) String email, @Parameter(in = ParameterIn.HEADER, description = "Password for authorization." ,schema=@Schema()) @RequestHeader(value="password", required=true) String password, @Parameter(in = ParameterIn.HEADER, description = "The name of the company that users will see." ,schema=@Schema()) @RequestHeader(value="name", required=true) String name);


    @Operation(summary = "Updates the company's product database", description = "A json containing an array of products is passed. For each product, a check is carried out, if it is already in the database, then it is replaced, if there is no such product yet, then it is added to the company's database.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/api/profile",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> putProfile(@Parameter(in = ParameterIn.HEADER, description = "The email address of the registered company for its identification in the database." ,schema=@Schema()) @RequestHeader(value="email", required=true) String email, @Parameter(in = ParameterIn.HEADER, description = "Company password" ,schema=@Schema()) @RequestHeader(value="password", required=true) String password, @Parameter(in = ParameterIn.DEFAULT, description = "An object containing an array of products that the company wants to add or update.", schema=@Schema()) @Valid @RequestBody ProfileBody body);
}

